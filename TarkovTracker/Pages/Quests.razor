@page "/quests"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage

<PageTitle>Quests</PageTitle>

@using Tarkov.Common;
@using Tarkov;
@using Tarkov.Dictionaries;
@using Tarkov.Entities;
@using TarkovTracker.Data;


@if (updating)
{
    <h2>Active Quests (Updating...)</h2>
}
else
{
    <h2>Active Quests</h2>
}

@if (quests == null || quests.Count <= 0)
{
    <p><em>No active quests to show!</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Trader</th>
                <th>Title</th>
                <th>Description</th>
                <th>Maps</th>
            </tr>
        </thead>
        <tbody>
        @foreach (Quest quest in quests)
        {
            if (quest != null)
            {
                <tr>
                    <td width="8%">@quest.Trader.Name</td>
                    @code {
                        //<td width="17%"><a href="@quest.WikiLink">@quest.Name</a></td>
                    }
                    <td width="17%">@quest.Name</td>

                    <td width="40%">
                    @foreach (var obj in quest.Objectives)
                    {
                        @obj.Description<br />
                    }
                    </td>
                    @if (quest.Map != null)
                    {
                        <td width="10%">@quest.Map.Name</td>
                    }
                    else
                    {
                        <td width="10%">Any Location</td>
                    }
                    <a href="quest/@quest.Id"><button class="btn btn-primary"><span class="oi oi-info"> </span></button></a>
                    <a><button class="btn btn-primary" @onclick="() => CompleteTaskAsync(quest.Id)"><span class="oi oi-check"> </span></button></a>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    private Api tarkov = Api.GetTarkov();
    private List<string>? completedQuests;
    private List<RQuest>? questMap;
    private int currentLevel;
    private Dictionary<string, int> currentTraders;

    private List<Quest>? quests;
    private bool updating = true;

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        if (bFirstRender) await InitialiseAsync();
    }

    private async Task CompleteTaskAsync(string id)
    {
        completedQuests.Add(id);
        updating = true;
        await BrowserStorage.SetAsync(StorageNames.CompletedTasks, completedQuests);
        await UpdateAsync(false);
    }

    private async Task InitialiseAsync()
    {
        var lresult = await BrowserStorage.GetAsync<int>(StorageNames.PlayerLevel);
        currentLevel = lresult.Success ? lresult.Value : 1;

        var tlresult = await BrowserStorage.GetAsync<Dictionary<string, int>>(StorageNames.TraderLevels);
        currentTraders = tlresult.Success ? tlresult.Value : Traders.GetFreshTraders();

        var fresult = await BrowserStorage.GetAsync<string>(StorageNames.PlayerFaction);
        string faction = fresult.Success ? fresult.Value : "USEC";

        var cresult = await BrowserStorage.GetAsync<List<string>>(StorageNames.CompletedTasks);
        completedQuests = cresult.Success ? cresult.Value : new List<string>();

        await UpdateAsync(true);
    }

    private async Task UpdateAsync(bool bFirst)
    {
        if (!bFirst || Cache.LoadedQuests == null)
        {
            // This method is wayyy too slow
            questMap = QuestMap.GetQuestMap(Cache.AllQuests.Values.ToArray(), completedQuests);
            /*List<Quest> updatedQuests = new List<Quest>();
            foreach (RQuest q in questMap)
            {
                if (q.IsUnlocked(currentLevel, currentTraders) && !completedQuests.Contains(q.Id))
                {
                    updatedQuests.Add(await tarkov.GetTaskAsync(q.Id));
                }
            }
            Cache.LoadedQuests = updatedQuests;*/
            Cache.LoadedQuests = GetActiveTasks(questMap);
        }
        quests = Cache.LoadedQuests;
        updating = false;
        StateHasChanged();
    }

    public List<Quest> GetActiveTasks(List<RQuest> questMap)
    {
        List<Quest> quests = new List<Quest>();

        if (Cache.AllQuests != null)
        {
            foreach (RQuest quest in questMap)
            {
                if (quest.IsUnlocked(currentLevel, currentTraders))
                {
                    quests.Add(Cache.AllQuests.GetValueOrDefault(quest.Id));
                }
            }
        }
        return quests;
    }
}
