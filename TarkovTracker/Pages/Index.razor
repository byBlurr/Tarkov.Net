@page "/"
@using Tarkov.Dictionaries;
@using Tarkov.Entities;
@using Tarkov;
@using TarkovTracker.Data;
s
<h2>Tarkov Tracker</h2>
<p>Keep track of your progress and what you need to do!</p>

<div style="display:grid; grid-template-columns: 1fr 1fr 1fr; column-gap: 5px; max-width:inherit; height:inherit;">
    <div class="card-group" style="width:200px; align-content: center; text-align:center;">
        <h4>Ingame Time</h4>
        <p class="craft-card-text">@lhour:@minutes  -|-  @rhour:@minutes</p>
    </div>
    <div class="card-group" style="width:200px; align-content: center; text-align:center;">
        <h4>Tasks</h4>
        <p class="craft-card-text">0/0 tasks completed</p>
    </div>
    <div class="card-group" style="width:200px; align-content: center; text-align:center;">
        <h4>Collector</h4>
        <p class="craft-card-text">0/0 items collected</p>
    </div>
</div>

<br />

<div style="display: flex; align-content:center;  text-align:center;">
    <div style="min-width:400px; text-align:center;">
        <h4>Changelog</h4>
        <div>
            <p class="craft-card-text">- Created the app.</p>
        </div>
    </div>

    <div style="min-width:400px; text-align:center;">
        <h4>Coming Soon...</h4>
        <div>
            <p class="craft-card-text">- Add coming soon and changelog.</p>
        </div>
    </div>
</div>

<SurveyPrompt Title="Finding Tarkov Tracker helpful?" />

@code {

    Api tarkov = Api.GetTarkov();

    private string lhour = "00";
    private string rhour = "12";
    private string minutes = "00";

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        TimeSpan left = tarkov.GetTime();
        TimeSpan right = tarkov.GetTime().Add(TimeSpan.FromHours(12));

        minutes = left.Minutes < 10 ? "0" + left.Minutes.ToString() : left.Minutes.ToString();
        lhour = left.Hours < 10 ? "0" + left.Hours.ToString() : left.Hours.ToString();
        rhour = right.Hours < 10 ? "0" + right.Hours.ToString() : right.Hours.ToString();

        if (bFirstRender)
        {
            // Start a loop to update the time
            await InvokeAsync(async () =>
            {
                while (true)
                {
                    StateHasChanged();
                    await Task.Delay(1250);
                }
            });
        }
    }

    /*
     * TODO:
     *      Add a changelog and todo list to this page
     *      Move styling to CSS files
     *      Add other craft categories
     *      Add functionality to add 'saved' quests
     */
}