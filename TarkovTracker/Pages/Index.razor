@page "/"
@using Tarkov.Entities;
@using Tarkov;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TarkovTracker.Data;
@inject ProtectedLocalStorage BrowserStorage

<h2>Tarkov Tracker Profile</h2>
<p>Personalise the tracker to best suit you!</p>

<h4>@time  |  @time2</h4>

<button class="btn btn-primary" @onclick="DecrementCount">Level Down</button>
<button class="btn btn-primary" @onclick="IncrementCount">Level Up</button>
<button class="btn btn-primary" @onclick="SwitchFaction">Switch Faction</button>

<div class="grid-container">
  <div class="grid-item">@faction</div>
  <div class="grid-item">Level @currentLevel</div>
</div>

<SurveyPrompt Title="Finding Tarkov Tracker helpful?" />
<button class="btn btn-primary" @onclick="Delete">Reset Data</button>

@code {

    Api tarkov = Api.GetTarkov();
    private int currentLevel = 1;
    private string faction = "USEC";
    private string time = "updating...";
    private string time2 = "updating...";

    protected override async Task OnAfterRenderAsync(bool bFirstRender)
    {
        TimeSpan left = tarkov.GetTime();
        TimeSpan right = tarkov.GetTime().Add(TimeSpan.FromHours(12));
        time = $"{left.Hours,2}:{left.Minutes,2}";
        time2 = $"{right.Hours,2}:{right.Minutes,2}";

        if (bFirstRender)
        {
            await Read();

            // Start a loop to update the time
            await InvokeAsync(async () =>
            {
                while (true)
                {
                    StateHasChanged();
                    await Task.Delay(1250);
                }
            });
        }
    }

    private async Task IncrementCount()
    {
        currentLevel++;
        if (currentLevel > 70) currentLevel = 1;
        await Save();
    }

    private async Task DecrementCount()
    {
        currentLevel--;
        if (currentLevel < 1) currentLevel = 70;
        await Save();
    }

    private async Task SwitchFaction()
    {
        if (faction.Equals("USEC")) faction = "BEAR";
        else faction = "USEC";
        await Save();
    }

    public async Task Save()
    {
        await BrowserStorage.SetAsync(StorageNames.PlayerFaction, faction);
        await BrowserStorage.SetAsync(StorageNames.PlayerLevel, currentLevel);
        StateHasChanged();
    }

    public async Task Read()
    {
        var fresult = await BrowserStorage.GetAsync<string>(StorageNames.PlayerFaction);
        faction = fresult.Success ? fresult.Value : "USEC";

        var lresult = await BrowserStorage.GetAsync<int>(StorageNames.PlayerLevel);
        currentLevel = lresult.Success ? lresult.Value : 1;
    }

    public async Task Delete()
    {
        await BrowserStorage.DeleteAsync(StorageNames.PlayerFaction);
        await BrowserStorage.DeleteAsync(StorageNames.PlayerLevel);
        await BrowserStorage.DeleteAsync(StorageNames.CompletedTasks);
        await BrowserStorage.DeleteAsync(StorageNames.NeededItems);
        await Read();
        StateHasChanged();
    }
}